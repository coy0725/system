package com.coy.introduction.systematic.thinking.structrue;

import com.coy.introduction.systematic.thinking.goal.SystemGoal;
import com.coy.introduction.systematic.thinking.relation.Connection;

/**
 * 要素
 * <p/>因为一加一等于二，所以你认为只要知道一就能知道二，但是你忘了，还必须理解两个一之间的关系
 * 构成系统的要素是比较容易发现的，因为他们大多是可见、有型的事物{@link VisableFactor}。例如，树是有树根、树干、树枝、树叶这些要素
 * 构成的。如果你更仔细的观察，还会发现其中有一些更小、更具体的单元，如流动着液体的叶脉和叶绿体等。当然要素并不一定是
 * 有型的的事物，一些无形的事物也可以是系统的要素{@link VirtualFactor}，比如一所大学中，学校的声誉和学术能力就是改系统至关重要的两大要素。
 *
 * <p/>事实上，你想罗列出一个系统中的所有要素时，你会发现那几乎是一件不可能完成的任务。你可以把一些要素分解成子要素，把子要素分解成
 * 子子要素，但很快你就会迷失在系统中，正如人们所说的“见树不见林”
 * 为避免这种情况，需要从探究要素转向探寻系统内在的连接关系，即研究吧要素整合在一起的关系。
 * 思考以下问题
 * <li/>如何才能知道你观察的是一个系统，而不是一堆材料的集合？
 * <li/>你能识别出各个部分吗？
 * <li/>这些部分相互之间有联系吗？
 * <li/>这些部分单独作用时产生的影响和它们整合在一起时产生的影响有所不同吗？
 * <li/>这些影响和长期的行为在各种环境中都是固定不变的吗？
 *
 * <p/>虽然系统中的某些要素是很重要的，但一般来说，改变要素对系统的影响是最小的。即使更换了一支球队的所有球员，它仍是一支球队。一棵树的
 * 细胞、树叶年年都在不断的变化，但它仍是一棵树。总之只要不触动系统的内在连接{@link Connection}和系统目标{@link SystemGoal}即使换掉
 * 所有的要素{@link Factor}系统也会保持不变，或者只是发生缓慢的变化。
 * @author coy
 * @since 2021/4/20
 **/
public interface Factor {

}
